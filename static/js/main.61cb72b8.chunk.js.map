{"version":3,"sources":["providers/dataProvider.js","providers/scalesProvider.js","components/Header/ShareLinks.js","components/Header/Header.js","components/Footer.js","components/Snowflake/SnowflakeItem.js","components/Snowflake/SnowflakeArm.js","components/Snowflake/Snowflake.js","components/SnowflakeCard.js","components/AllSongs.js","components/Navigation/Button.js","components/Song.js","components/About/Legend/ValenceLegend.js","components/About/Legend/SnowflakeArmOverall.js","components/About/Legend/SnowflakeItemsOverall.js","components/About/Legend/SingleItemLegend.js","components/About/Legend/ItemsGroupingLegend.js","components/About/Methodology.js","components/About/About.js","App.js","index.js"],"names":["songs","source","map","song","id","Object","assign","songData","sectionTotal","sections","length","groupTotal","groupSize","Math","ceil","maxGroupDuration","duration_ms","currentGroup","currentOrder","currentDuration","forEach","section","idx","order","duration","groupSections","dataProvider","cache","scales","size","updateScales","maxHeight","maxWidth","loudness","range","scalesProvider","getScales","arguments","undefined","DataProvider","flatMap","item","loudnessRange","d3","d","scaleLoudness","domain","tempoRange","tempo","scaleTempo","keys","s","key","allKeys","sort","f","scaleKey","padding","maxDuration","group","groupColor","prepareScales","shareText","shareImage","ShareLinks","currentUrl","window","location","hostname","react_default","a","createElement","className","href","concat","index_es","icon","faFacebookF","faTwitter","faPinterest","faLinkedin","Header","_ref","_ref$title","title","_ref$singer","singer","_ref$createdByBlock","createdByBlock","Link","to","Header_ShareLinks","Footer","target","rel","ScalesProvider","buildPath","itemHeight","itemHalfWidth","midPos","slopePos","scaleTest","SnowflakeItem","_ref$animated","animated","_ref$offset","offset","shouldScale","fill","transform","opacity","react","attributeName","from","begin","start","dur","repeatCount","type","additive","SnowflakeArm","_this$props","this","props","maximize","currentPos","nextShift","Snowflake_SnowflakeItem","info","scaleCoeff","getScaleCoeff","groupHeight","totalGroups","currentSectionHeight","max","React","PureComponent","defaultProps","arms","Snowflake","width","height","Snowflake_SnowflakeArm","angle","SnowflakeCard","components_Snowflake_Snowflake","name","artist","AllSongs","components_Header_Header","components_SnowflakeCard","components_Footer","BUTTON_TYPES","getTargetLink","songId","getIcon","faChevronRight","faChevronLeft","NavigationButton","color","scaleValence","videoOptions","playerVars","autoplay","Song","state","isSongReady","onSongReady","playVideo","_this","setState","_this$state","lastSong","backgroundPosition","floor","valence","style","Button","YouTube","youtubeId","videoId","onReady","onStateChange","onPlayerStateChanged","opts","params","match","parseInt","ValenceLegend","SnowflakeArmOverall","SnowflakeItemsOverall","itemsSpace","i","x","y","SingleItemLegend","heightItem","itemAnnotations","position","dy","dx","subject","note","label","wrap","depth","annot","lib","objectSpread","lineType","radius","radiusPadding","ItemGroupsAnnotation","baseAnnot","armAnnotations","push","prepareAnotations","annotation","connector","end","ItemsGroupingLegend","_ref2","armScales","ItemsGroupingLegend_ItemGroupsAnnotation","Metodology","songExample","About","Legend_ValenceLegend","Legend_SnowflakeArmOverall","sizeSnowflakes","Legend_SnowflakeItemsOverall","Legend_SingleItemLegend","Legend_ItemsGroupingLegend","Methodology","App","Switch","Route","exact","path","component","ReactDOM","render","HashRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.61cb72b8.chunk.js","sourcesContent":["import source from \"../data/new-year-songs.json\";\r\n\r\nconst groupSections = (songData) => {\r\n  // shared constants\r\n  const maxGroupCount = 5;\r\n  // related to the song\r\n  const sectionTotal = songData.sections.length;\r\n  const groupTotal = sectionTotal > maxGroupCount ? maxGroupCount : sectionTotal;\r\n  const groupSize = Math.ceil(sectionTotal / groupTotal);\r\n  const maxGroupDuration = Math.ceil(songData.duration_ms / groupTotal) / 1000;\r\n  // gropping\r\n  let currentGroup = 0;\r\n  let currentOrder = 0;\r\n  let currentDuration = 0;\r\n  songData.sections.forEach((section, idx) => {\r\n\r\n    if (currentDuration > maxGroupDuration || currentOrder >= groupSize) {\r\n      currentOrder = 0;\r\n      currentDuration = 0;\r\n      currentGroup = currentGroup + 1;\r\n    }\r\n\r\n    section[\"group\"] = {\r\n      id: currentGroup,\r\n      order: currentOrder,\r\n    };\r\n\r\n    currentOrder = currentOrder + 1;\r\n    currentDuration = currentDuration + section.duration;\r\n  });\r\n\r\n  return songData;\r\n}\r\n\r\nconst processSong = (song, id) => {\r\n  return Object.assign({ id }, groupSections(song));\r\n}\r\n// our data doen't change dynamically\r\n// so we don't need to recalculate it on each request to data provider\r\nconst songs = source.map(processSong);\r\n\r\nconst getTitles = () => songs.map((d) => d.Song);\r\nconst getAllSongs = () => songs;\r\nconst getSong = (id) => songs[id];\r\nconst getSongUrl = (id) => `https://open.spotify.com/embed/track/${songs[id].track_id}`;\r\nconst getSongsCount = () => songs.length;\r\n\r\nexport default {\r\n\tgetTitles,\r\n  getAllSongs,\r\n  getSong,\r\n  getSongUrl,\r\n  getSongsCount\r\n};\r\n","import * as d3 from 'd3';\r\nimport DataProvider from \"./dataProvider\";\r\n\r\nlet cache = {\r\n\tscales: null,\r\n\tsize: 1\r\n};\r\n\r\nconst prepareScales = () => {\r\n\tconst data = DataProvider.getAllSongs();\r\n\tconst sections = data.flatMap(item => item.sections);\r\n\r\n\tconst loudnessRange = d3.extent(sections, d => d.loudness);\r\n\tconst scaleLoudness = d3.scaleLinear().domain(loudnessRange);\r\n\r\n\tconst moderatoTempo = 80;\r\n\tconst tempoRange = d3.extent(sections, d => d.tempo);\r\n\tconst scaleTempo = d3.scaleLinear().domain([moderatoTempo, tempoRange[1]]).range([0, -3]);\r\n\r\n\tif (scaleTempo(tempoRange[0]) > 1.5) {\r\n\t\tscaleTempo.domain([tempoRange[0], moderatoTempo]).range([1.5, 0]);\r\n\t}\r\n\r\n\tconst keys = {};\r\n\tsections.forEach(s => { keys[s.key] = true });\r\n\tconst allKeys = Object.keys(keys).sort((f, s) => f - s);\r\n\tconst scaleKey = d3.scalePoint()\r\n\t\t\t\t\t\t\t.domain(allKeys)\r\n\t\t\t\t\t\t\t.range([0, 1])\r\n\t\t\t\t\t\t\t.padding(1);\r\n\r\n\tconst maxDuration = d3.max(sections, d => d.group.order === 0 ? d.duration : 0);\r\n\tconst scaleDuration = d3.scaleLinear().domain([0, maxDuration]);\r\n\r\n\tconst scaleGroupColor = d3.scaleOrdinal()\r\n\t\t\t\t\t\t\t\t.domain([0, 1, 2, 3, 4])\r\n\t\t\t\t\t\t\t\t.range([\"#216594\", \"#913371\", \"#DE7F5F\"]);\r\n\r\n\treturn {\r\n\t\tloudness: scaleLoudness,\r\n\t\ttempo: scaleTempo,\r\n\t\tkey: scaleKey,\r\n\t\tduration: scaleDuration,\r\n\t\tgroupColor: scaleGroupColor\r\n\t};\r\n}\r\n\r\nconst getScales = (size, noCache = false) => {\r\n\tif (noCache || !cache.scales) {\r\n\t\tcache.scales = prepareScales();\r\n\t}\r\n\tupdateScales(size);\r\n\treturn cache.scales;\r\n};\r\n\r\nconst updateScales = (size) => {\r\n\tif (cache.size === size) {\r\n\t\treturn;\r\n\t}\r\n\tif (!!size && size > 0) {\r\n\t\tcache.size = size;\r\n\t}\r\n\tif (cache.scales == null) {\r\n\t\treturn;\r\n\t}\r\n  \tconst maxHeight = cache.size / (5);\r\n  \tconst maxWidth = maxHeight * 0.2;\r\n  \tcache.scales.loudness.range([0, maxWidth]);\r\n \tcache.scales.duration.range([0, maxHeight]);\r\n}\r\n\r\nexport default {\r\n  getScales,\r\n  updateScales,\r\n};","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFacebookF, faTwitter, faLinkedin, faPinterest } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst shareText = \"The best New Year songs as Snowflakes! ❄❄❄\";\r\nconst shareImage = \"https://raw.githubusercontent.com/maryzam/snowflake-songs/gh-pages/snowflakes.png\";\r\n\r\nconst ShareLinks = () => {\r\n\tconst currentUrl = window.location.hostname;\r\n\treturn (\r\n\t\t<div className=\"socialfloat\">\r\n\t    \t<a key=\"facebook\"\r\n\t    \t\tclassName=\"button facebook\"\r\n\t    \t\thref= {`http://www.facebook.com/sharer/sharer.php?u=${currentUrl}` }>\r\n\t            <FontAwesomeIcon icon={faFacebookF} size=\"lg\" />\r\n\t        </a>\r\n\r\n\t      \t<a key=\"twitter\"\r\n\t      \t\tclassName=\"button twitter\" \r\n\t      \t\thref={ `https://twitter.com/intent/tweet?text=${shareText}&url=${currentUrl}`}>\r\n\t            <FontAwesomeIcon icon={faTwitter} size=\"lg\" />\r\n\t        </a>\r\n\t        \r\n\t        <a key=\"pinterest\"\r\n\t        \tclassName=\"button pinterest\" \r\n\t        \thref={ `http://pinterest.com/pin/create/button/?url=${currentUrl}&description=${shareText}&media=${shareImage}`}>\r\n\t            <FontAwesomeIcon icon={faPinterest} size=\"lg\" />\r\n\t        </a>\r\n\t        \r\n\t        <a key=\"linkedin\"\r\n\t        \tclassName=\"button linkedin\" \r\n\t        \thref={ `http://www.linkedin.com/shareArticle?mini=true&url=${currentUrl}&title=${shareText}&source=${shareImage}` }>\r\n\t           <FontAwesomeIcon icon={faLinkedin} size=\"lg\" />\r\n\t        </a>\r\n\t    </div>\r\n\t);\r\n};\r\n\r\nexport default ShareLinks;","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport ShareLinks from \"./ShareLinks\";\r\n\r\nconst Header = ({ \r\n    title = \"Snowflake Songs\",\r\n    singer = \"\",\r\n    createdByBlock = true \r\n}) => (\r\n    <header>\r\n        \t<h1>\r\n                <Link to={`/`}>{ title }</Link>\r\n            </h1>\r\n            { (singer && singer.length) ? (<p className=\"singer\"> by { singer }</p>) : null }\r\n            {\r\n                createdByBlock ?\r\n                (<p className=\"autors\">\r\n                        by <a href=\"https://twitter.com/MaryZamCode\">Mary Zam</a> & <a href=\"https://twitter.com/edithmaulandi\">Edith Maulandi</a>\r\n                </p>) : null\r\n            }\r\n        <ShareLinks />\r\n    </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Footer = ({ createdByBlock = false }) => (\r\n    <footer>\r\n      \t<p>To learn about snowflake build process, legend, and metodology read <Link to=\"/About\">About</Link></p>\r\n        <p>Source code & full data set availabe on <a href=\"http://github.com/maryzam/snowflake-songs/\" target=\"_blank\"  rel=\"noopener noreferrer\">GitHub</a></p>\r\n        { \r\n        \tcreatedByBlock ?\r\n        \t(\r\n        \t\t<p className=\"autors\">\r\n\t               Created by <a href=\"https://twitter.com/MaryZamCode\">Mary Zam</a> & <a href=\"https://twitter.com/edithmaulandi\">Edith Maulandi</a>\r\n\t            </p>\r\n            ) :\tnull\r\n        }\r\n    </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Fragment } from 'react';\r\nimport { ScalesProvider } from \"../../providers\";\r\n\r\nimport * as d3 from 'd3';\r\n\r\nconst scales = ScalesProvider.getScales();\r\n\r\nconst buildPath = (section) => {\r\n\t\r\n\tconst itemHeight = scales.duration(section.duration);\r\n\tconst itemHalfWidth = scales.loudness(section.loudness) / 2;\r\n\tconst midPos = scales.key(section.key) * itemHeight;\r\n\tconst slopePos = scales.tempo(section.tempo) * itemHalfWidth + itemHalfWidth;\r\n\r\n\treturn `M 0 ${itemHeight} \r\n\t\t\tQ ${-slopePos} ${midPos * 1.1} ${-itemHalfWidth} ${midPos} \r\n\t\t\tQ ${-slopePos} ${midPos * 0.9} 0 0\r\n\t\t\tQ ${slopePos} ${midPos * 0.9} ${itemHalfWidth} ${midPos} \r\n\t\t\tQ ${slopePos} ${midPos * 1.1}0 0 ${itemHeight}`;\r\n};\r\n\r\nconst scaleTest = d3.scaleOrdinal().domain([0, 1, 2, 3, 4, 5]).range([\"red\", \"green\", \"red\", \"green\", \"red\", \"green\"]);\r\n\r\nconst SnowflakeItem = ({ section, animated = false, offset = 0 }) => {\r\n\r\n\tconst shouldScale = animated && (section.group.id > 2 || section.group.order > 0);\r\n\treturn (\r\n\t\t<path \r\n\t\t\td={ buildPath(section) }\r\n\t\t\tfill={ scaleTest(section.group.id )}\r\n\t\t\ttransform={ `translate(0, ${ offset })${ shouldScale ? \"scale(0)\": \"\"}` }\r\n\t\t\topacity={ animated ? 0.1 : 1 }>\r\n\t\t\t{\r\n\t\t\t\tanimated \r\n\t\t\t\t\t? (<Fragment>\r\n\t\t\t\t\t\t<animate attributeName=\"opacity\" \r\n\t\t\t\t\t\t\tfrom=\"0.1\" to=\"1\" fill=\"freeze\"\r\n\t\t\t\t\t\t\tbegin={ `${section.start}s` } \r\n\t\t\t\t\t\t\tdur={ `${section.duration}s` }\r\n\t\t\t\t\t\t\trepeatCount={ 1 } />\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tshouldScale \r\n\t\t\t\t\t\t\t\t? (<Fragment>\r\n\t\t\t\t\t\t\t\t\t<animateTransform attributeName=\"transform\"\r\n\t\t\t\t\t\t\t\t\t\ttype=\"translate\" fill=\"freeze\"\r\n\t\t\t\t\t\t\t\t\t\tfrom={ `0, ${ offset }`} \r\n\t\t\t\t\t\t\t\t\t\tto={ `0, ${ offset }` }\r\n\t\t\t\t\t\t\t\t\t\tbegin={ `${section.start}s` } \r\n\t\t\t\t\t\t\t\t\t\tdur={ `${section.duration}s` }\r\n\t\t\t\t\t\t\t\t\t\trepeatCount={ 1 } />\r\n\t\t\t\t\t\t\t\t\t<animateTransform attributeName=\"transform\"\r\n\t\t\t\t\t\t\t\t\t    type=\"scale\"\r\n\t\t\t\t\t\t\t\t\t\tfrom=\"0 0\" to=\"1 1\" fill=\"freeze\"\r\n\t\t\t\t\t\t\t\t\t\tbegin={ `${section.start}s` } \r\n\t\t\t\t\t\t\t\t\t\tdur={ `${section.duration}s` }\r\n\t\t\t\t\t\t\t\t\t\trepeatCount={ 1 } additive=\"sum\" />\r\n\t\t\t\t\t\t\t\t\t</Fragment>) \r\n\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t            \r\n\t\t\t\t\t\t\t</Fragment>) \r\n\t\t\t\t\t: null\r\n\t\t\t\t}\r\n\t\t\t</path>\r\n\t\t);\r\n}\r\n\r\nexport default SnowflakeItem;","import React from 'react';\r\n\r\nimport { ScalesProvider } from \"../../providers\";\r\nimport SnowflakeItem from \"./SnowflakeItem\";\r\n\r\nconst scales = ScalesProvider.getScales();\r\n\r\nclass SnowflakeArm extends React.PureComponent { \r\n\r\n\trender() {\r\n\r\n\t\tconst { song, size, maximize, animated } = this.props;\r\n\t\t\r\n\t\tthis.updateScales(size, song, maximize);\r\n\t\t\r\n\t\tlet currentPos = 0;\r\n\t\tlet currentGroup = 0;\r\n\t\tlet nextShift = scales.duration(song.sections[0].duration);\r\n\t\treturn (\r\n\t\t\t<g id={`pattern_${ song.id }`} className=\"snowflake-section\">\r\n\t\t\t\t{\r\n\t\t\t\t\tsong.sections.map((section) => {\r\n\t\t\t\t\t\tif (currentGroup !== section.group.id) {\r\n\t\t\t\t\t\t\tcurrentGroup = section.group.id;\r\n\t\t\t\t\t\t\tcurrentPos = currentPos + nextShift + 2;\r\n\t\t\t\t\t\t\tnextShift = scales.duration(section.duration);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<SnowflakeItem\r\n\t\t\t\t\t\t\t\tinfo={ `${section.group.id}_${section.group.order}` }\r\n\t\t\t\t\t\t\t\tkey={ section.start }\r\n\t\t\t\t\t\t\t\tsection={ section }\r\n\t\t\t\t\t\t\t\tanimated={ animated }\r\n\t\t\t\t\t\t\t\toffset={ currentPos }\r\n\t\t\t\t\t\t\t/>);\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</g>\r\n\t\t);\r\n\t}\r\n\r\n\tupdateScales(size, song, maximize) {\r\n\t\tScalesProvider.updateScales(size);\r\n\t\tif (maximize) {\r\n\t\t\tconst scaleCoeff = this.getScaleCoeff(song, size);\r\n\t\t\tScalesProvider.updateScales(size * scaleCoeff);\r\n\t\t}\r\n\t}\r\n\r\n\tgetScaleCoeff(song, size) {\r\n\t\tlet groupHeight = 0;\r\n\t\tlet maxHeight = 0;\r\n\t\tlet currentGroup = 0;\r\n\t\tlet totalGroups = 0;\r\n\t\tsong.sections.forEach((section) => {\r\n\t\t\tlet currentSectionHeight = scales.duration(section.duration);\r\n\t\t\tif (currentGroup !== section.group.id) {\r\n\t\t\t\tcurrentGroup = section.group.id\r\n\t\t\t\tgroupHeight = groupHeight + currentSectionHeight;\r\n\t\t\t\ttotalGroups++;\r\n\t\t\t} \r\n\t\t\tmaxHeight = Math.max(maxHeight, (groupHeight + currentSectionHeight));\r\n\t\t});\r\n\t\tmaxHeight = maxHeight + totalGroups * 2;\r\n\t\treturn (size / 2 / maxHeight);\r\n\t}\r\n}\r\n\r\nSnowflakeArm.defaultProps = {\r\n\tsize: 300,\r\n\tmaximize: false,\r\n\tanimated: false\r\n};\r\n\r\nexport default SnowflakeArm;","import React from 'react';\r\n\r\nimport SnowflakeArm from './SnowflakeArm';\r\n\r\nconst arms = [0, 60, 120, 180, 240, 300];\r\n\r\nclass Snowflake extends React.PureComponent { \r\n\r\n\trender() {\r\n\t\tconst { song, size, maximize, animated } = this.props;\r\n\t\treturn (\r\n\t\t\t<svg \r\n\t\t\t\tclassName=\"snowflake\"\r\n\t\t\t\twidth={size} height={size} >\r\n\t\t\t\t<def>\r\n\t\t\t\t\t<SnowflakeArm\r\n\t\t\t\t\t\tsong={ song }\r\n\t\t\t\t\t\tsize={ size }\r\n\t\t\t\t\t\tmaximize={ maximize } \r\n\t\t\t\t\t\tanimated={ animated } />\r\n\t\t\t\t</def>\r\n\t\t\t\t<g transform={ `translate(${size / 2}, ${ size / 2})` }>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tarms.map((angle) => (\r\n\t\t\t\t\t\t\t<g key={ angle }\r\n\t\t\t\t\t\t\t \tclassName=\"line\"\r\n\t\t\t\t\t\t\t \ttransform={`rotate(${angle})`}>\r\n\t\t\t\t\t\t\t \t<use href={`#pattern_${ song.id }`}/>\r\n\t\t\t\t\t\t\t </g>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</g>\r\n\t\t\t</svg>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nSnowflake.defaultProps = {\r\n\tsize: 300,\r\n\tmaximize: false\r\n};\r\n\r\nexport default Snowflake;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Snowflake from './Snowflake/Snowflake';\r\n\r\nconst SnowflakeCard = ({ song, size }) => (\r\n\r\n\t\t\t<div className=\"snowflake-card\">\r\n\r\n\t\t\t\t<Link to={`/song/${song.id}`}>\r\n\r\n\t\t\t        <Snowflake \r\n\t\t\t        \tsong={ song }\r\n\t\t\t        \tsize={ size } />\r\n\r\n\t\t\t\t\t<div className=\"title-wrap\">\r\n\t\t\t\t\t\t<p>{ song.name }</p>\r\n\t\t\t\t\t\t<p><small>{ song.artist }</small></p>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</Link>\r\n\r\n\r\n\t\t\t</div>\r\n\r\n\t);\r\n\r\nexport default SnowflakeCard;\r\n","import React from 'react';\r\nimport { DataProvider } from \"../providers\";\r\n\r\nimport Header from \"./Header/Header\";\r\nimport Footer from \"./Footer\";\r\nimport SnowflakeCard from \"./SnowflakeCard\";\r\n\r\nconst AllSongs = () => {\r\n    const songs = DataProvider.getAllSongs();\r\n    return (\r\n      <article className=\"all-songs colorful-background dynamic\">\r\n        <Header />\r\n        <main className=\"songs-container\">\r\n            {\r\n              songs.map((d) => (\r\n                <SnowflakeCard \r\n                  key={d.id} \r\n                  song={d} \r\n                  size={ 300 }/>\r\n              ))            \r\n            }\r\n        </main>\r\n        <Footer />\r\n      </article>\r\n  );\r\n};\r\n\r\nexport default AllSongs;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronRight, faChevronLeft } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst BUTTON_TYPES = {\r\n  NEXT: \"next\",\r\n  PREV: \"prev\"\r\n}\r\n\r\nconst getTargetLink = (songId, type) => {\r\n  const targetSongId = (type === BUTTON_TYPES.NEXT) \r\n                        ? (songId + 1) \r\n                        : (songId - 1);\r\n  return `/song/${ targetSongId }`;\r\n}\r\n\r\nconst getIcon = (type) => {\r\n  return (type === BUTTON_TYPES.NEXT) \r\n            ? faChevronRight \r\n            : faChevronLeft;\r\n}\r\n\r\nconst NavigationButton = ( { songId, type } ) => (\r\n  <div className=\"navigation-button\">\r\n    <Link to={ getTargetLink(songId, type) }>\r\n      <FontAwesomeIcon icon={ getIcon(type) } size=\"2x\" color=\"white\"/>\r\n    </Link>\r\n  </div>\r\n);\r\n\r\nexport { BUTTON_TYPES };\r\nexport default NavigationButton;\r\n","import React from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport * as d3 from 'd3';\r\n\r\nimport { DataProvider } from \"../providers\";\r\n\r\nimport Header from \"./Header/Header\";\r\nimport Footer from \"./Footer\";\r\nimport Snowflake from \"./Snowflake/Snowflake\";\r\nimport NavigationButton, { BUTTON_TYPES } from \"./Navigation/Button\";\r\n\r\nconst scaleValence = d3.scaleLinear().domain([0, 1]).range([0, 100]);\r\n\r\nconst videoOptions = { playerVars: { autoplay: 1 } };\r\n\r\nclass Song extends React.PureComponent  {\r\n\r\n  state = {\r\n    songId: \"\",\r\n    isSongReady: false\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    const { params } = props.match;\r\n    const songId = parseInt(params.id, 10);\r\n    if (songId !== state.songId) {\r\n      return { \r\n        songId: songId,\r\n        isSongReady: false \r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  onSongReady = ({ target }) => {\r\n     target.playVideo();\r\n     this.setState({ isSongReady: true });\r\n  }\r\n\r\n  render() {\r\n    \r\n    const { isSongReady, songId } = this.state; \r\n\r\n    const song = DataProvider.getSong(songId);\r\n    const lastSong = DataProvider.getSongsCount() - 1;\r\n    const backgroundPosition = Math.floor(scaleValence(song.valence));\r\n\r\n    return (\r\n        <article \r\n          className=\"single-song colorful-background\"\r\n          style={{ backgroundPosition: `${ backgroundPosition }% ${backgroundPosition}%` }}>\r\n          <Header title={ song.name } singer={ song.artist } createdByBlock={ false } />\r\n          <main>\r\n\r\n            <div className=\"content\">\r\n              { (songId === 0) ? null : <NavigationButton type={ BUTTON_TYPES.PREV } songId={ songId } /> }\r\n              <div className=\"grow\">\r\n                {\r\n                  isSongReady \r\n                  ? (\r\n                    <Snowflake \r\n                        key={ song.id }\r\n                        song={ song }\r\n                        size={ 500 } \r\n                        maximize={ true }\r\n                        animated={ true } />\r\n                  ) : (\r\n                    <div className=\"preloader\"></div>\r\n                  )\r\n                }\r\n              </div>\r\n              { (songId === lastSong) ? null : <NavigationButton type={ BUTTON_TYPES.NEXT } songId={ songId } /> }\r\n            </div>\r\n\r\n            <YouTube \r\n              key={ song.youtubeId }\r\n              className=\"background-player\"\r\n              videoId={ song.youtubeId }\r\n              onReady={ this.onSongReady } \r\n              onStateChange={ this.onPlayerStateChanged } \r\n              opts={ videoOptions }\r\n            />\r\n\r\n          </main>\r\n          <Footer createdByBlock={ true } />\r\n        </article>\r\n    );    \r\n  }\r\n}\r\n\r\nexport default Song;\r\n","import React from 'react';\r\n\r\nconst ValenceLegend = () => (\r\n\t\r\n\t<section>\r\n\t\r\n\t\t<p> \r\n\t\t\tEach snowflake is built from a song audio attributes : some from the overall song and some from song parts. \r\n\t        The background of the song encode its overall <b>Valence</b>, which describes its musical positiveness :\r\n\t    </p>\r\n\t        \r\n\t    <div className=\"color-legend\">\r\n\t       <div className=\"color-legend-text left\"> <p> 0 : sound more sad, depressed, angry </p> </div>\r\n\t       <div className=\"color-legend-text right\"> <p> 1 : sound more happy, cheerful, euphoric </p> </div>\r\n\t    </div>\r\n\t    \r\n\t    <div className=\"colorful-rectangle\"></div>\r\n\r\n    </section>\r\n);\r\n\r\nexport default ValenceLegend;","import React from 'react';\r\n\r\nimport SnowflakeArm from \"../../Snowflake/SnowflakeArm\";\r\n\r\nconst SnowflakeArmOverall = ({ song, width, height }) => (\r\n\t<section>\r\n  \t<p> Snowflakes have six arms, which are the same one repeated and rotated for 6 angles.</p>\r\n    <div className=\"svg-horiz-centered\">\r\n     \t<svg width={ width }  height={ height }>\r\n        <g transform={ `translate(0, ${ height / 2})rotate(270)` }>\r\n          <SnowflakeArm \r\n              song={ song }\r\n              size={ width * 2 }\r\n              maximize={ true } \r\n              animated={ false } />\r\n          </g>\r\n      </svg>\r\n    </div>\r\n  </section>\r\n);\r\n\r\nexport default SnowflakeArmOverall;","import React from 'react';\r\n\r\nimport { ScalesProvider } from \"../../../providers\";\r\nimport SnowflakeItem from \"../../Snowflake/SnowflakeItem\";\r\n\r\nconst svgMargin = 30;\r\nconst itemsByRow = 4;\r\n\r\nconst SnowflakeItemsOverall = ({ size, song }) => {\r\n\r\n  \tconst scales = ScalesProvider.getScales(size * 3);\r\n\tconst itemsSpace = size / itemsByRow ;\r\n\r\n\treturn (\r\n\t\t<section>\r\n\t        <p> \r\n\t        \tSnowflakes arms are built from  the song's list of sections. \r\n\t        \tThose are parts of the song that have different attributes as duration, tempo, key and loudness.\r\n\t        </p>\r\n\t       \r\n\t        <div className=\"svg-horiz-centered\">\r\n\r\n\t          <svg width={size} height={size}>\r\n\t        \r\n\t            <g className=\"snowflake-section\" transform={ `translate(${ svgMargin }, ${ svgMargin })`} >\r\n\t        \t{\r\n\t        \t\tsong.sections.map((section,i) => {\r\n\t        \t\t\tconst x = i % itemsByRow * itemsSpace;\r\n\t        \t\t\tconst y = Math.floor(i / itemsByRow) * itemsSpace;\r\n\t        \t\t\treturn (\r\n\t\t        \t\t\t<g key={ section.start } transform={ `translate(${ x }, ${ y })` }>\r\n\t\t        \t\t\t\t<SnowflakeItem\r\n\t\t        \t\t\t\t\tsection={ section }\r\n\t\t        \t\t\t\t\tscales={ scales }\r\n\t\t        \t\t\t\t/>\r\n\t\t        \t\t\t</g>\r\n\t\t        \t\t);\r\n\t        \t\t})\r\n\t        \t}\r\n\t        \t</g>\r\n\t          </svg>\r\n\t        </div>\r\n\t    </section>\r\n    );\r\n};\r\n\r\nexport default SnowflakeItemsOverall;","import React from 'react';\r\nimport { AnnotationBracket, AnnotationCalloutCircle } from 'react-annotation';\r\n\r\nimport { ScalesProvider } from \"../../../providers\";\r\nimport SnowflakeItem from \"../../Snowflake/SnowflakeItem\";\r\n\r\nconst annotColor = \"grey\";\r\nconst annotMargin = 10;\r\n\r\nconst SingleItemLegend = ({ size, section }) => {\r\n\r\n  \tconst heightItem = size * 1.3;\r\n  \tconst scales = ScalesProvider.getScales(size * 10);\r\n\r\n \tconst itemAnnotations = [\r\n\t    { \r\n\t    \tposition : { x: scales.loudness(section.loudness)/2, y: 0, dy: 0, dx: 0}, \r\n\t     \tsubject: { height: scales.duration(section.duration) },\r\n\t      \tnote: { title:\"Duration\", label: \"is encoded as height of the item\",  wrap: 60 }\r\n\t    },\r\n\t    { \r\n\t    \tposition : { \r\n\t    \t\tx: - scales.loudness(section.loudness)/2, \r\n\t    \t\ty: scales.duration(section.duration) + annotMargin, \r\n\t    \t\tdy: 0, dx: 0 }, \r\n\t      \tsubject: { width: scales.loudness(section.loudness) },\r\n\t      \tnote: { title:\"Loudness\", label: \"is encoded as width of the item\" }\r\n\t    },\r\n\t    { \r\n\t    \tposition : { \r\n\t    \t\tx: - scales.loudness(section.loudness)/2 - annotMargin, \r\n\t    \t\ty: 0, dy: 0, dx: 0 }, \r\n\t      \tsubject: { \r\n\t      \t\theight: scales.key(section.key) * scales.duration(section.duration), \r\n\t      \t\tdepth: -10 },\r\n\t      \tnote: { title:\"Key\", label: \"is encoded as the height of the mid point\", wrap: 60 }\r\n\t    }\r\n\t];\r\n\r\n\treturn (\r\n\t\t<section>\r\n\t        <p> Every section result in an item giving its specific properties, where scales range are computed from the whole songs list: </p>\r\n\t        <div className=\"svg-horiz-centered\">\r\n\t          <svg width={ size } height={ heightItem }>\r\n\t            <g transform={ `translate(${ size/2 }, ${ heightItem/2 - scales.duration(section.duration)/2 })`} >\r\n\t\t            <g className=\"snowflake-section\">\r\n\t\t    \t\t\t<SnowflakeItem \r\n\t\t    \t\t\t\tsection={ section }\r\n\t\t    \t\t\t\tscales={ scales }\r\n\t\t    \t\t\t/>\r\n\t        \t\t</g>\r\n\t        \t\t{\r\n\t\t                itemAnnotations.map((annot,i) => {\r\n\t\t                  return (\r\n\t\t              \t\t<AnnotationBracket\r\n\t\t              \t\t\t  key={i}\r\n\t\t                      {...annot.position}\r\n\t\t                      color={annotColor}\r\n\t\t                      note={{ ...annot.note }}\r\n\t\t                      subject={{\r\n\t\t                        ...annot.subject,\r\n\t\t                        \"type\":\"curly\"\r\n\t\t                      }}\r\n\t\t                    />\r\n\t\t                  )\r\n\t\t                })\r\n\t\t        \t}\r\n\t\t        \t\t\t\r\n\t        \t<AnnotationCalloutCircle\r\n\t                x={annotMargin}\r\n\t                y={annotMargin}\r\n\t                dy={-30}\r\n\t                dx={30}\r\n\t                color={annotColor}\r\n\t                note={{\"title\":\"Tempo\",\r\n\t                  \"label\":\"is encoded as the curviness\",\r\n\t                  \"lineType\":\"horizontal\"}}\r\n\t                subject={{ \"radius\":20, \"radiusPadding\":3 }}\r\n\t              />\r\n\t            \r\n\t            </g>\r\n\t          </svg>\r\n\t        </div>\r\n\t        \r\n\t        <p> In each section, <b>Key</b> represent the overall keu of the section from 0 (C key) to 11 (B key) following the <a href=\"https://en.wikipedia.org/wiki/Pitch_class\"> pitch class notation</a>. \r\n\t        <b>Tempo</b> attribute is encoded as concave for a low tempo and convex for a high one.</p>\r\n        </section>\r\n\t);\r\n};\r\n\r\nexport default SingleItemLegend;","import React from 'react';\r\nimport { AnnotationCalloutElbow } from 'react-annotation';\r\n\r\nimport { ScalesProvider } from \"../../../providers\";\r\nimport SnowflakeArm from \"../../Snowflake/SnowflakeArm\";\r\n\r\nconst annotColor = \"grey\";\r\n\r\nconst prepareAnotations = (song, scales, offset) => {\r\n    const baseAnnot = {\r\n      yPadding: 20,\r\n      dy: 100,\r\n      dx: 50\r\n    };\r\n\r\n    const armAnnotations = [\r\n      { \r\n        position : { \r\n          x: 0,\r\n          y: offset + baseAnnot.yPadding, \r\n          dy: baseAnnot.dy, \r\n          dx: baseAnnot.dx\r\n        }, \r\n        note: { \r\n          title:\"Groups\", \r\n          label:\"Sections are grouped by order to enable a nice overlap\"\r\n        }\r\n      }\r\n    ];\r\n\r\n    let currentPos = 0;\r\n    song.sections.forEach((section) => {\r\n        if (section.group.order !== 0) { return; }\r\n        armAnnotations.push(\r\n        { \r\n            position : { \r\n              x: currentPos, \r\n              y: offset + baseAnnot.yPadding, \r\n              dy: baseAnnot.dy, \r\n              dx: baseAnnot.dx - currentPos\r\n            },\r\n            note: { title:\"\", label:\"\" }\r\n        });\r\n        currentPos += scales.duration(section.duration);\r\n    });\r\n\r\n    return armAnnotations;\r\n}\r\n\r\nconst ItemGroupsAnnotation = ({song, offset}) => {\r\n\r\n  const armScales = ScalesProvider.getScales();\r\n  const annotations = prepareAnotations(song, armScales, offset);\r\n\r\n  return annotations.map((annotation, id) => (\r\n    <AnnotationCalloutElbow key={id}\r\n      {...annotation.position}\r\n      color={ annotColor }\r\n      note={{ ...annotation.note,\r\n        \"wrap\":150,\r\n        \"lineType\":\"horizontal\"}}\r\n         connector={{\"type\":\"line\",\"end\":\"arrow\"}} \r\n    />)\r\n  );\r\n}\r\n\r\nconst ItemsGroupingLegend = ({ size, width, height, song, armScales }) => {\r\n\r\n\treturn (\r\n\t\t<section>\r\n\t\t\t<p> Items are grouped to overlap : </p>\r\n\t\t    <div className=\"svg-horiz-centered\">\r\n\t\t        <svg width={ width } height={ height }>\r\n\t\t            <g transform={ `translate(0, ${ height / 4 }) rotate(${270})`} >\r\n\t\t              <SnowflakeArm \r\n                    song={ song }\r\n                    size={ width * 2 }\r\n                    maximize={ true } \r\n                    animated={ false } />\r\n\t\t            </g>\r\n\t\t            <ItemGroupsAnnotation \r\n                  song={ song }\r\n                  armScales={ armScales }\r\n                  offset= { height / 4}\r\n                />\r\n\t\t        </svg>\r\n\t\t    </div>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport default ItemsGroupingLegend;","import React from 'react';\r\n\r\nconst Metodology = () => (\r\n\t<article>\r\n\t\t\r\n        <h2> Methodology </h2>\r\n\r\n        <p> Starting from the topic of Christams songs, we spend some time searching for data and nice stories. One great inspiration was the <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://insights.spotify.com/us/\">Spotify Insights blog</a>. And finally a great New Year's playlist won the deal ! </p>\r\n\r\n        <p> We purposefully choose not to use lyrics. After some thoughts, we decided to use the Spotify API to easily retrieve songs data. Spotify API offer a quite detailed song data for each song track : \r\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/\">audio features</a> - global song attributes -\r\n          and  <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/\">audio analysis</a> - detail song attribute by song's sections and even smaller parts (segments).\r\n        We used python with Jupyter Notebook and <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://spotipy.readthedocs.io/en/latest/\">Spotipy library</a> to easily retrieve data given a playlist or a list of song with their tracks ID.</p>\r\n\r\n       <p> The main steps then were the following: </p>\r\n       <ol>\r\n         <li> Get to know audio features & analysis attributes </li>\r\n         <li> Select attributes to encode in the visualisation. Our main choice here was to only use sections as segments were really small duration parts of songs, and use some of the global attributes - mainly Valence. </li>\r\n         <li> Retrive data with Spotify API and Spotipy library, deleted unused attributes and convert the list to JSON. </li>\r\n       </ol>\r\n\r\n\t</article>\r\n);\r\n\r\nexport default Metodology;","import React from 'react';\r\n\r\nimport { DataProvider } from \"../../providers\";\r\n\r\nimport Snowflake from '../Snowflake/Snowflake';\r\nimport Header from \"../Header/Header\";\r\nimport Footer from \"../Footer\";\r\n\r\nimport ValenceLegend from './Legend/ValenceLegend';\r\nimport SnowflakeArmOverall from './Legend/SnowflakeArmOverall';\r\nimport SnowflakeItemsOverall from './Legend/SnowflakeItemsOverall';\r\nimport SingleItemLegend from './Legend/SingleItemLegend';\r\nimport ItemsGroupingLegend from './Legend/ItemsGroupingLegend';\r\n\r\nimport Methodology from './Methodology';\r\n\r\nconst sizeSnowflakes = 300;\r\nconst songExample = DataProvider.getSong(1);\r\n\r\nconst About = () => (\r\n    <div>\r\n    \r\n      <Header />\r\n      \r\n      <main className=\"about\">\r\n\r\n        <article>\r\n          <h2> Legend & Explanation </h2>\r\n          <div className=\"svg-horiz-centered\">\r\n            <Snowflake\r\n              song={ songExample }\r\n              size={ sizeSnowflakes }\r\n              maximize={ true }\r\n            />\r\n          </div>\r\n          \r\n          <ValenceLegend />\r\n\r\n          <SnowflakeArmOverall \r\n            song={ songExample } \r\n            width={ sizeSnowflakes } \r\n            height={ sizeSnowflakes / 4 }\r\n          />\r\n\r\n          <SnowflakeItemsOverall \r\n            size={ sizeSnowflakes } \r\n            song={ songExample } />\r\n\r\n          <SingleItemLegend \r\n            size={ sizeSnowflakes } \r\n            section={ songExample.sections[0] } />\r\n\r\n          <ItemsGroupingLegend \r\n            size={ sizeSnowflakes } \r\n            song={ songExample } \r\n            width={ sizeSnowflakes } \r\n            height={ sizeSnowflakes * 0.8 } />\r\n         \r\n          <p> Items and others experiments can be found in the draft folder on github. </p>\r\n\r\n        </article>\r\n\r\n        <Methodology />\r\n         \r\n      </main>\r\n      \r\n      <Footer />\r\n\r\n    </div>\r\n);\r\n\t\r\n\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { Switch, Route} from \"react-router-dom\";\r\n\r\nimport AllSongs from \"./components/AllSongs\";\r\nimport Song from \"./components/Song\";\r\nimport About from \"./components/About/About\";\r\n\r\nimport './style/social-share.css';\r\nimport './style/layout.css';\r\nimport './style/snowflake.css';\r\nimport './style/header.css';\r\nimport './style/footer.css';\r\nimport './style/single-song.css';\r\nimport './style/about.css';\r\nimport './style/preloader.css';\r\n\r\nconst App = () => (\r\n    <Switch>\r\n      <Route exact path='/' component={ AllSongs }/>\r\n      <Route exact path='/about' component={ About }/>\r\n      <Route path='/song/:id' component={ Song }/>\r\n    </Switch>\r\n);\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport { HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render((\r\n\t  <HashRouter>\r\n\t    <App />\r\n\t  </HashRouter>\r\n  ),\r\n  document.getElementById('root'));\r\n"],"sourceRoot":""}